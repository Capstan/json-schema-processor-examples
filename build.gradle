/*
 * Copyright (c) 2014, Francis Galiegue (fgaliegue@gmail.com)
 *
 * This software is dual-licensed under:
 *
 * - the Lesser General Public License (LGPL) version 3.0 or, at your option, any
 *   later version;
 * - the Apache Software License (ASL) version 2.0.
 *
 * The text of both licenses is available under the src/resources/ directory of
 * this project (under the names LGPL-3.0.txt and ASL-2.0.txt respectively).
 *
 * Direct link to the sources:
 *
 * - LGPL 3.0: https://www.gnu.org/licenses/lgpl-3.0.txt
 * - ASL 2.0: http://www.apache.org/licenses/LICENSE-2.0.txt
 */

plugins {
    id("net.ltgt.errorprone") version "0.8.1" apply false
}

apply(plugin: "java");
apply(plugin: "maven");
apply(plugin: "signing");
apply(plugin: "osgi");
apply(plugin: "idea");
apply(plugin: "eclipse");
apply(plugin: "net.ltgt.errorprone");

group = "com.github.java-json-tools";

version = "0.8.2-SNAPSHOT";
sourceCompatibility = JavaVersion.VERSION_1_7;
targetCompatibility = JavaVersion.VERSION_1_7; // defaults to sourceCompatibility

project.ext {
    description = "Sample JSON Schema related processors using json-schema-core and various external libraries";
};


/*
 * Repositories to use
 */
repositories {
    mavenCentral();
}


/*
 * List of dependencies
 */
dependencies {
    errorprone("com.google.errorprone:error_prone_core:2.3.3")
    errorproneJavac("com.google.errorprone:javac:9+181-r4173-1")
    compile(group: "com.github.fge", name: "json-schema-validator",
        version: "2.2.6");
    compile(group: "com.github.reinert", name: "jjschema", version: "0.6") {
        exclude(group: "com.google.guava", module: "guava");
        exclude(group: "com.fasterxml.jackson.core", module: "jackson-core");
        exclude(group: "com.fasterxml.jackson.core", module: "jackson-databind");
    }
    compile(group: "com.googlecode.jsonschema2pojo",
        name: "jsonschema2pojo-core", version: "0.3.5") {
        exclude(group: "com.fasterxml.jackson.core", module: "jackson-core");
        exclude(group: "com.fasterxml.jackson.core", module: "jackson-databind");
    }
    compile(group: "com.github.fge", name: "json-schema-avro",
        version: "0.1.4");
    compile(group: "com.github.fge", name: "json-patch", version: "1.7");
    testCompile(group: "org.testng", name: "testng", version: "6.8.7") {
        exclude(group: "junit", module: "junit");
        exclude(group: "org.beanshell", module: "bsh");
        exclude(group: "org.yaml", module: "snakeyaml");
    };
    testCompile(group: "org.mockito", name: "mockito-core", version: "1.9.5");
}

javadoc {
    options {
        def currentJavaVersion = org.gradle.api.JavaVersion.current()
        // FIXME: https://github.com/gradle/gradle/issues/11182
        if (currentJavaVersion.compareTo(org.gradle.api.JavaVersion.VERSION_1_9) >= 0) {
            addStringOption("-release", "7");
        }
        links("https://docs.oracle.com/javase/7/docs/api/");
        links("https://www.javadoc.io/doc/com.google.code.findbugs/jsr305/3.0.1/");
        links("https://fasterxml.github.com/jackson-databind/javadoc/2.2.0/");
        links("https://www.javadoc.io/doc/com.google.guava/guava/16.0.1/");
        links("https://fge.github.io/msg-simple/");
    }
}

/*
 * Necessary! Otherwise TestNG will not be used...
 *
 * Also, we don't want gradle's default HTML report: it does not support
 * parameterized tests which I use a _lot_.
 */
test {
    useTestNG() {
        useDefaultListeners = true;
    };
}

/*
 * Necessary to generate the source and javadoc jars
 */
task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = "sources";
    from sourceSets.main.allSource;
}

/*
 * Javadoc: we need to tell where the overview.html is, it will not pick it up
 * automatically...
 */

//javadoc {
//    options.overview = "src/main/java/overview.html";
//}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = "javadoc";
    from javadoc.destinationDir;
}

//fatJar {
//    classifier = "full";
//}

/*
 * Lint all the things!
 */
allprojects {
    gradle.projectsEvaluated {
        tasks.withType(JavaCompile) {
            options.compilerArgs << "-Xlint:all" << "-Xlint:-serial" << "-Werror"
        }
        tasks.withType(Javadoc) {
            options.addStringOption('Xwerror', '-quiet')
        }
    }
}

artifacts {
    archives jar;
    archives sourcesJar;
    archives javadocJar;
// bad idea:    archives fatJar;
}

wrapper {
    gradleVersion = "5.6.3";
    distributionUrl = "https://services.gradle.org/distributions/gradle-${gradleVersion}-all.zip";
}

task pom {
    doLast {
        pom {}.writeTo("${projectDir}/pom.xml");
    }
}

/*
 * SIGNING
 */

project.ext {
    scmUrl = sprintf("git@github.com:java-json-tools/%s.git", name)
    projectURL = sprintf("https://github.com/java-json-tools/%s", name);
    sonatypeStaging = "https://oss.sonatype.org/service/local/staging/deploy/maven2/";
    sonatypeSnapshots = "https://oss.sonatype.org/content/repositories/snapshots/";
};

task checkSigningRequirements {
    doLast {
        def requiredProperties = [ "sonatypeUsername", "sonatypePassword" ];
        def noDice = false;
        requiredProperties.each {
            if (project.properties[it] == null) {
                noDice = true;
               System.err.printf("property \"%s\" is not defined!")
            }
        }
        if (noDice)
            throw new IllegalStateException("missing required properties for " +
                "upload");
    }
}

uploadArchives {
    dependsOn(checkSigningRequirements);
    repositories {
        mavenDeployer {
            beforeDeployment {
                MavenDeployment deployment -> signing.signPom(deployment);
            }

            repository(url: "${sonatypeStaging}") {
                authentication(
                    userName: project.properties["sonatypeUsername"],
                    password: project.properties["sonatypePassword"]
                );
            }

            snapshotRepository(url: "${sonatypeSnapshots}") {
                authentication(
                    userName: project.properties["sonatypeUsername"],
                    password: project.properties["sonatypePassword"]
                );
            }
        }
    }
}

/*
 * Configure pom.xml on install, uploadArchives
 */
[
    install.repositories.mavenInstaller,
    uploadArchives.repositories.mavenDeployer
]*.pom*.whenConfigured { pom ->
    pom.project {
        name "${name}";
        packaging "jar";
        description "${description}";
        url "${projectURL}";

        scm {
            url "${scmUrl}";
            connection "${scmUrl}";
            developerConnection "scm:git:${scmUrl}";
        }

        licenses {
            license {
                name "Lesser General Public License, version 3 or greater";
                url "http://www.gnu.org/licenses/lgpl.html";
                distribution "repo";
            };
            license {
                name "Apache Software License, version 2.0";
                url "http://www.apache.org/licenses/LICENSE-2.0";
                distribution "repo";
            }
        }

        developers {
            developer {
                id "huggsboson";
                name "John Huffaker";
                email "jhuffaker+java-json-tools@gmail.com";
            }
        }
    }
}

ext.forRelease = !version.endsWith("-SNAPSHOT");
signing {
    required { forRelease && gradle.taskGraph.hasTask("uploadArchives") };
    sign configurations.archives;
}

